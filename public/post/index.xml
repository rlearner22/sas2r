<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My thoughts (ramblings) about SAS and R on SAS2R</title>
    <link>https://sas2r.netlify.app/post/</link>
    <description>Recent content in My thoughts (ramblings) about SAS and R on SAS2R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://sas2r.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting_started</title>
      <link>https://sas2r.netlify.app/2021-04-04-getting-started/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sas2r.netlify.app/2021-04-04-getting-started/</guid>
      <description>How Can I use SAS software for personnel researchThere are couple of ways you can do
Download student version of SAS software and set up an virtual environment ( this means that within your computer you will be creating a folder and make it virtual , that way you can’t install anything else in that folder) .You need certain amount of research to install it .</description>
    </item>
    
    <item>
      <title>SAS Library set up Vs R Studio Project set up</title>
      <link>https://sas2r.netlify.app/2021-04-03-library-set-up-vs-project-set-up/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sas2r.netlify.app/2021-04-03-library-set-up-vs-project-set-up/</guid>
      <description>Keeping all the files associated with a project (script/output/data) togetherSAS Libraries / R Studio ProjectHigh level Summary
Case 1 : “PERM” is windows folder
In Brief SAS Libname Vs R -studio setupSASRNotesLibname “c:\PERM”setwd(“c:\PERM”)DO NOT USE this methodUse system macros eg: %curdir or SAS_EXECFILENAMEuse HERE packageRecommendedcan use “\” windows style backwardaccepts only “/” forward slashes .</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://sas2r.netlify.app/2020-12-01-r-rmarkdown/</link>
      <pubDate>Tue, 01 Dec 2020 21:13:14 -0500</pubDate>
      
      <guid>https://sas2r.netlify.app/2020-12-01-r-rmarkdown/</guid>
      <description>R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.</description>
    </item>
    
    <item>
      <title>cmd Test</title>
      <link>https://sas2r.netlify.app/cmd-test/</link>
      <pubDate>Tue, 04 Aug 2020 21:05:05 -0500</pubDate>
      
      <guid>https://sas2r.netlify.app/cmd-test/</guid>
      <description>Testing out GitHub issue https://github.com/zwbetz-gh/cupper-hugo-theme/issues/42
Line 1 Line 2 Line 3  </description>
    </item>
    
    <item>
      <title>Katex Math Typesetting</title>
      <link>https://sas2r.netlify.app/katex-math-typesetting/</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sas2r.netlify.app/katex-math-typesetting/</guid>
      <description>Enable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.
Note: Use the online reference of supported TeX functions.
Some math:
$$ \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… $$ $$ \varphi = \dfrac{1+\sqrt5}{2}= 1.6180339887… $$
More math:
$$\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$ $$ \varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } } $$</description>
    </item>
    
    <item>
      <title>Cupper Typography</title>
      <link>https://sas2r.netlify.app/cupper-typography/</link>
      <pubDate>Thu, 14 Feb 2019 15:36:09 -0600</pubDate>
      
      <guid>https://sas2r.netlify.app/cupper-typography/</guid>
      <description>Headings # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6  Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Text *This text will be italic* _This will also be italic_ **This text will be bold** __This will also be bold__ _You **can** combine them_  This text will be italic
This will also be italic
This text will be bold</description>
    </item>
    
    <item>
      <title>Cupper Shortcodes</title>
      <link>https://sas2r.netlify.app/cupper-shortcodes/</link>
      <pubDate>Tue, 12 Feb 2019 23:39:06 -0600</pubDate>
      
      <guid>https://sas2r.netlify.app/cupper-shortcodes/</guid>
      <description>blockquote {{&amp;lt; blockquote author=&amp;quot;Carl Jung&amp;quot; &amp;gt;}} Even a happy life cannot be without a measure of darkness, and the word happy would lose its meaning if it were not balanced by sadness. It is far better to take things as they come along with patience and equanimity. {{&amp;lt; /blockquote &amp;gt;}}   Even a happy life cannot be without a measure of darkness, and the word happy would lose its meaning if it were not balanced by sadness.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://sas2r.netlify.app/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sas2r.netlify.app/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://sas2r.netlify.app/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sas2r.netlify.app/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://sas2r.netlify.app/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sas2r.netlify.app/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>
